<?php

/**
 * @file
 *
 */

/**
 * Implements hook_field_info().
 *
 */
function ik_channel_filter_field_info() {
  return array(
    'ik_channel_filter_search' => array(
      'label' => t('Channel filter'),
      'description' => t('Filter channel content base on user data'),
      'default_widget' => 'ik_filter_search_widget',
      'default_formatter' => 'ik_filter_search_formatter',
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 */
function ik_channel_filter_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

}

/**
 * Implements hook_field_is_empty().
 *
 */
function ik_channel_filter_field_is_empty($item, $field) {

}

/**
 * Implements hook_field_widget_info().
 *
 * Tell Drupal about the search autocomplete widget, that should be used to
 * select the slids.
 */
function ik_channel_filter_field_widget_info() {
  return array(
    'ik_filter_search_autocomplete' => array(
      'label' => t('Default (autocomplete)'),
      'field types' => array('ik_channel_filter_search'),
    ),
  );
}


function ik_channel_filter_field_widget_settings_form($field, $instance) {
  $settings = $instance['widget']['settings'];
  $form = array();

  $form['search_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Text to display in the search field'),
    '#default_value' => $settings['search_text'],
//    '#element_validate' => array('element_validate_integer_positive'),
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Implements hook_field_widget_form().
 *
 * The form that is used to display the widget defined above in the widget info
 * hook.
 */
function ik_channel_filter_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#type' => 'fieldset',
  );

  // Get element values.
  $settings = $instance['widget']['settings'];
  $is_required = $element['#required'];
  $item = &$items[$delta];

  switch ($instance['widget']['type']) {
    case 'ik_filter_search_autocomplete':

      $element['search']['field'] = array(
        '#type' => 'textfield',
        '#attributes' => array(
          'placeholder' => isset($settings['search_text']) ? $settings['search_text'] : 'Search',
        )
      );

      $element['search']['button'] = array(
        '#markup' => l(t('Add'), '#', array(
          'attributes' => array(
            'class' => array(
              'button',
              'add-button',
            ),
          )
        )),
      );

      break;
  }


   return $element;
}

/**
 * Implements hook_field_widget_error().
 *
 */
function ik_channel_filter_field_widget_error($element, $error, $form, &$form_state) {

}

/**
 * Implements hook_field_formatter_info().
 *
 */
function ik_channel_filter_field_formatter_info() {
  return array(
    'ik_channel_filter_search_formatter' => array(
      'label' => t(''),
      'field types' => array('ik_channel_filter_search'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 */
function ik_channel_filter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

}


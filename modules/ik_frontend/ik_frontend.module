<?php
/**
 * @file
 *
 */

/**
 * Implements hook_menu().
 *
 */
function ik_frontend_menu() {
  $items = array();

  $items['channels/%/run'] = array(
    'title' => 'Start slideshow channel',
    'page callback' => 'ik_frontend_run',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['channels/%/update'] = array(
    'title' => 'Request updated slide information',
    'page callback' => 'ik_frontend_update',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['channels/%/slide/%'] = array(
    'title' => 'Request slide information',
    'page callback' => 'ik_frontend_fetch_slide',
    'page arguments' => array(1, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 *
 */
function ik_frontend_theme() {
  return array(
    'ik_frontend_buttons' => array(
      'variables' => array('title' => NULL, 'buttons' => NULL),
      'template' => 'ik-frontend-buttons'
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 */
function ik_frontend_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_node_insert().
 *
 * It's a funny place to have the node hook, but we need this mapping in the
 * front end to fast fetch channels.
 */
function ik_frontend_node_insert($node) {
  $token = ik_channel_filter_token($node->nid);
  $record = array('nid' => $node->nid, 'token' => $token);
  drupal_write_record('ik_channel_mapping', $record);
}

/**
 * Implements hook_node_delete().
 *
 * Make sure that we remove old channel tokens.
 */
function ik_frontend_node_delete($node) {
  db_delete('ik_channel_mapping')->condition('nid', $node->nid)->execute();
}

/**
 * Get channel nid based on channel token mapping.
 *
 * @param string $token
 *  Token representing a given channel.
 * @return int
 *  Channel node id.
 */
function ik_frontend_find_channel_nid($token) {
  $nid = db_select('ik_channel_mapping', 'ikcm')
    ->fields('ikcm', array('nid'))
    ->condition('token', $token)
    ->execute()
    ->fetchCol();
  return $nid[0];
}


function ik_frontend_get_slides($entity) {
  $field = field_info_field('field_channel_preview');
  $field_names = isset($field['settings']['ik_search']['types']) ? $field['settings']['ik_search']['types'] : array();
  $values = array();
  foreach ($field_names as $fieldname) {
    $field = $entity->$fieldname;
    if (!empty($field)) {
      foreach ($field as $lang => $data) {
        $values[$fieldname] = check_plain($data[0]['data']);
      }
    }
  }

  // Get basic slide information based on the filter.
  module_load_include('inc', 'ik_channel_filter', 'ik_channel_filter.queries');
  $slides = ik_channel_filter_get_slides($values);

  return $slides;
}


function ik_frontend_enrich_slides(&$slides) {


}


function ik_frontend_run($token) {

  // Add javascript.

  // Return skeleton for slide show (complet HTML page <header><content><footer> etc.).

  // Map channel hash to channel nid ??? (cache mapping).

  echo 'Requested content for channel: ' . $token;
}


function ik_frontend_update($token) {


  // Find filter values, by loading channel node (cache the result).
  $nid = ik_frontend_find_channel_nid($token);
  $entity = entity_load('node', array($nid));
  $entity = $entity[$nid];

  // Get values that shold be used to find slids.
  $slides = ik_frontend_get_slides($entity);

  // We need to get slides layout and duration as well.
  ik_frontend_enrich_slides($slides);

  // JSON encode.
  echo drupal_json_output($slides);
}


function ik_frontend_fetch_slide($token, $sid) {

  // Map channel hash to channel nid ??? (cache mapping).

  // Load slide node content entity_load().

  // Json encode.

  echo 'Requested slide for channel (' . $token . ') with id: ' . $sid;
}